//////////////////////////////
///////// FONTS /////////////
////////////////////////////

@font-face {
  font-family: 'Open Sans', sans-serif;
  src: local('Open Sans'),
    url('../../assets/fonts/OpenSans-VariableFont_wdth,wght.ttf')
      format('truetype');
}

@font-face {
  font-family: 'Crison';
  src: local('CrimsonText-Regular'),
    url('../../assets/fonts/CrimsonText-Regular.ttf') format('truetype');
}

//////////////////////////////
///////// GRADIENTS /////////////
////////////////////////////

.g {
  &c {
    &-1 {
      background: -webkit-linear-gradient(
        198deg,
        rgba(51, 130, 180, 1) 0%,
        rgba(195, 1, 198, 1) 100%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      text-shadow: rgba(253, 249, 235, 0.1) 1px 0 5px;
      filter: drop-shadow(0 2mm 1mm rgba(160, 160, 160, 0.7));
    }
    &-2 {
      background: -webkit-linear-gradient(
        198deg,
        rgba(9, 112, 185, 1) 0%,
        rgba(106, 117, 0, 1) 100%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      text-shadow: rgba(253, 249, 235, 0.1) 1px 0 5px;
      filter: drop-shadow(0 2mm 1mm rgba(160, 160, 160, 0.7));
    }
  }
}

// Define rem-calc function if not available elsewhere
@function rem-calc($values) {
  @return calc($values / 16) * 1rem;
}

//FOCUS - Make sure these are accessible globally
$focus: #007bff dotted rem-calc(2.5);
$f-style: rem-calc(0.5) !default;

////////////////////////////////////////////////////////////
///////// prefers-reduced-motion //////////////////////////
//////////////////////////////////////////////////////////

@media (prefers-reduced-motion: reduce) {
  [data-aos] {
    transition: none !important;
    transform: none !important;
  }
}

.btn-custom {
  background: var(--bg-creme-color);
  border: var(--border-creme-color);
  color: var(--text-creme-color);
}

// Prevent TalkBack focus on background elements when offcanvas is open
.offcanvas-backdrop {
  pointer-events: auto !important;
}

// Use inert attribute styling to completely hide background content
body.offcanvas-open main,
body.offcanvas-open header:not(:has(.offcanvas)),
body.offcanvas-open footer,
body.offcanvas-open aside:not(:has(.offcanvas)) {
  visibility: hidden;
  pointer-events: none;
  position: relative;
  z-index: -1;
}

// Ensure offcanvas is always on top and focusable
.offcanvas {
  position: fixed !important;
  z-index: 1055 !important;
  visibility: visible !important;
  pointer-events: auto !important;
}

// Ensure offcanvas content is focusable
.offcanvas * {
  pointer-events: auto;
}

// Prevent TalkBack focus on offcanvas elements until they are opened
.offcanvas:not(.show) {
  visibility: hidden !important;
  pointer-events: none !important;
}

.offcanvas:not(.show) * {
  tabindex: -1 !important;
  pointer-events: none !important;
}

// Restore focus when offcanvas is shown
.offcanvas.show {
  visibility: visible !important;
  pointer-events: auto !important;
}

.offcanvas.show * {
  pointer-events: auto !important;
}

// Remove tabindex override for focusable elements when shown
.offcanvas.show button,
.offcanvas.show a,
.offcanvas.show input,
.offcanvas.show select,
.offcanvas.show textarea,
.offcanvas.show [tabindex] {
  tabindex: 0 !important;
}

.offcanvas.show {
  visibility: visible !important;
}
