{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\nclass TranslateLoader {}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang) {\n    void lang;\n    return of({});\n  }\n  static ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateFakeLoader_BaseFactory;\n    return function TranslateFakeLoader_Factory(t) {\n      return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n    };\n  }();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateFakeLoader,\n    factory: TranslateFakeLoader.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\nclass MissingTranslationHandler {}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n  handle(params) {\n    return params.key;\n  }\n  static ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n    return new (t || FakeMissingTranslationHandler)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FakeMissingTranslationHandler,\n    factory: FakeMissingTranslationHandler.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  const t1 = typeof o1,\n    t2 = typeof o2;\n  let length, key, keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isDict(value) {\n  return isObject(value) && !isArray(value);\n}\nfunction isObject(value) {\n  return typeof value === 'object';\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction mergeDeep(target, source) {\n  const output = Object.assign({}, target);\n  if (!isObject(target)) {\n    return mergeDeep({}, source);\n  }\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isDict(source[key])) {\n        if (key in target) {\n          output[key] = mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\n/**\n * Gets a value from an object by composed key\n * getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @param target\n * @param key\n */\nfunction getValue(target, key) {\n  const keys = key.split(\".\");\n  key = \"\";\n  do {\n    key += keys.shift();\n    if (isDefined(target) && isDefined(target[key]) && (isDict(target[key]) || isArray(target[key]) || !keys.length)) {\n      target = target[key];\n      key = \"\";\n    } else if (!keys.length) {\n      target = undefined;\n    } else {\n      key += \".\";\n    }\n  } while (keys.length);\n  return target;\n}\n/**\n * Gets a value from an object by composed key\n * parser.setValue({a:{b:{c: \"test\"}}}, 'a.b.c', \"test2\") ==> {a:{b:{c: \"test2\"}}}\n * @param target an object\n * @param key E.g. \"a.b.c\"\n * @param value to set\n */\nfunction setValue(target, key, value) {\n  const keys = key.split('.');\n  let current = target;\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    // If we're at the last key, set the value\n    if (i === keys.length - 1) {\n      current[key] = value;\n    } else {\n      // If the key doesn't exist or isn't an object, create an empty object\n      if (!current[key] || !isDict(current[key])) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n  }\n}\nclass TranslateParser {}\nclass TranslateDefaultParser extends TranslateParser {\n  templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  interpolate(expr, params) {\n    if (isString(expr)) {\n      return this.interpolateString(expr, params);\n    } else if (isFunction(expr)) {\n      return this.interpolateFunction(expr, params);\n    }\n    return undefined;\n  }\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n    return expr.replace(this.templateMatcher, (substring, b) => {\n      const r = getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n  static ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateDefaultParser_BaseFactory;\n    return function TranslateDefaultParser_Factory(t) {\n      return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n    };\n  }();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateDefaultParser,\n    factory: TranslateDefaultParser.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateCompiler {}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n  compile(value, lang) {\n    void lang;\n    return value;\n  }\n  compileTranslations(translations, lang) {\n    void lang;\n    return translations;\n  }\n  static ɵfac = /* @__PURE__ */function () {\n    let ɵTranslateFakeCompiler_BaseFactory;\n    return function TranslateFakeCompiler_Factory(t) {\n      return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n    };\n  }();\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateFakeCompiler,\n    factory: TranslateFakeCompiler.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  defaultLang;\n  /**\n   * The lang currently used\n   */\n  currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n  translations = {};\n  /**\n   * an array of langs\n   */\n  langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onDefaultLangChange = new EventEmitter();\n}\nconst ISOALTE_TRANSLATE_SERVICE = new InjectionToken('ISOALTE_TRANSLATE_SERVICE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nconst makeObservable = value => {\n  return isObservable(value) ? value : of(value);\n};\nclass TranslateService {\n  store;\n  currentLoader;\n  compiler;\n  parser;\n  missingTranslationHandler;\n  useDefaultLang;\n  isolate;\n  extend;\n  loadingTranslations;\n  pending = false;\n  _onTranslationChange = new EventEmitter();\n  _onLangChange = new EventEmitter();\n  _onDefaultLangChange = new EventEmitter();\n  _defaultLang;\n  _currentLang;\n  _langs = [];\n  _translations = {};\n  _translationRequests = {};\n  lastUseLanguage = null;\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\n   * The lang currently used\n   */\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\n   * an array of langs\n   */\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\n   * a list of translations per lang\n   */\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param isolate whether this service should use the store or not\n   * @param extend To make a child module extend (and use) translations from parent modules.\n   * @param defaultLanguage Set the default language using configuration\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    /** set the default language from configuration */\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\n   * Sets the default language to use as a fallback\n   */\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n    const pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(() => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Gets the default language used\n   */\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\n   * Changes the lang currently used\n   */\n  use(lang) {\n    // remember the language that was called\n    // we need this with multiple fast calls to use()\n    // where translation loads might complete in random order\n    this.lastUseLanguage = lang;\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n    // on init set the currentLang immediately\n    if (!this.currentLang) {\n      this.currentLang = lang;\n    }\n    const pending = this.retrieveTranslations(lang);\n    if (isObservable(pending)) {\n      pending.pipe(take(1)).subscribe(() => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\n   * Changes the current lang\n   */\n  changeLang(lang) {\n    // received a new language file\n    // but this was not the one requested last\n    if (lang !== this.lastUseLanguage) {\n      return;\n    }\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n    // if there is no default lang, use the one that we just set\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Retrieves the given translations\n   */\n  retrieveTranslations(lang) {\n    // if this language is unavailable or extend is true, ask for it\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.loadAndCompileTranslations(lang);\n      return this._translationRequests[lang];\n    }\n    return undefined;\n  }\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   *\n   * @deprecated This function is meant for internal use. There should\n   * be no reason to use outside this service. You can plug into this\n   * functionality by using a customer TranslateLoader or TranslateCompiler.\n   * To load a new language use setDefaultLang() and/or use()\n   */\n  getTranslation(lang) {\n    return this.loadAndCompileTranslations(lang);\n  }\n  loadAndCompileTranslations(lang) {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next: res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? {\n          ...res,\n          ...this.translations[lang]\n        } : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error: err => {\n        void err;\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  setTranslation(lang, translations, shouldMerge = false) {\n    const interpolatableTranslations = this.compiler.compileTranslations(translations, lang);\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], interpolatableTranslations);\n    } else {\n      this.translations[lang] = interpolatableTranslations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Returns an array of currently available langs\n   */\n  getLangs() {\n    return this.langs;\n  }\n  /**\n   * Add available languages\n   */\n  addLangs(langs) {\n    langs.forEach(lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\n   * Update the list of available languages\n   */\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  getParsedResultForKey(translations, key, interpolateParams) {\n    let res;\n    if (translations) {\n      res = this.runInterpolation(getValue(translations, key), interpolateParams);\n    }\n    if (res === undefined && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.runInterpolation(getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n    if (res === undefined) {\n      const params = {\n        key,\n        translateService: this\n      };\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n    return res !== undefined ? res : key;\n  }\n  runInterpolation(translations, interpolateParams) {\n    if (isArray(translations)) {\n      return translations.map(translation => this.runInterpolation(translation, interpolateParams));\n    } else if (isDict(translations)) {\n      const result = {};\n      for (const key in translations) {\n        result[key] = this.runInterpolation(translations[key], interpolateParams);\n      }\n      return result;\n    } else {\n      return this.parser.interpolate(translations, interpolateParams);\n    }\n  }\n  /**\n   * Returns the parsed result of the translations\n   */\n  getParsedResult(translations, key, interpolateParams) {\n    // handle a bunch of keys\n    if (key instanceof Array) {\n      const result = {};\n      let observables = false;\n      for (const k of key) {\n        result[k] = this.getParsedResultForKey(translations, k, interpolateParams);\n        observables = observables || isObservable(result[k]);\n      }\n      if (!observables) {\n        return result;\n      }\n      const sources = key.map(k => makeObservable(result[k]));\n      return forkJoin(sources).pipe(map(arr => {\n        const obj = {};\n        arr.forEach((value, index) => {\n          obj[key[index]] = value;\n        });\n        return obj;\n      }));\n    }\n    return this.getParsedResultForKey(translations, key, interpolateParams);\n  }\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" is required and cannot be empty`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(res => {\n        return makeObservable(this.getParsedResult(res, key, interpolateParams));\n      }));\n    }\n    return makeObservable(this.getParsedResult(this.translations[this.currentLang], key, interpolateParams));\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the translation changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" is required and cannot be empty`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return makeObservable(res);\n    })));\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return makeObservable(res);\n    })));\n  }\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages\n   * will be used except any promise handling.\n   */\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || key.length === 0) {\n      throw new Error('Parameter \"key\" is required and cannot be empty');\n    }\n    const result = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (isObservable(result)) {\n      if (Array.isArray(key)) {\n        return key.reduce((acc, currKey) => {\n          acc[currKey] = currKey;\n          return acc;\n        }, {});\n      }\n      return key;\n    }\n    return result;\n  }\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  set(key, translation, lang = this.currentLang) {\n    setValue(this.translations[lang], key, isString(translation) ? this.compiler.compile(translation, lang) : this.compiler.compileTranslations(translation, lang));\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Changes the default lang\n   */\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Allows to reload the lang file from the file\n   */\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.loadAndCompileTranslations(lang);\n  }\n  /**\n   * Deletes inner translation\n   */\n  resetLang(lang) {\n    delete this._translationRequests[lang];\n    delete this.translations[lang];\n  }\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  getBrowserLang() {\n    if (typeof window === 'undefined' || !window.navigator) {\n      return undefined;\n    }\n    const browserLang = this.getBrowserCultureLang();\n    return browserLang ? browserLang.split(/[-_]/)[0] : undefined;\n  }\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    return window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n  }\n  static ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(ISOALTE_TRANSLATE_SERVICE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: TranslateStore\n  }, {\n    type: TranslateLoader\n  }, {\n    type: TranslateCompiler\n  }, {\n    type: TranslateParser\n  }, {\n    type: MissingTranslationHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_DEFAULT_LANG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ISOALTE_TRANSLATE_SERVICE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [USE_EXTEND]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DEFAULT_LANGUAGE]\n    }]\n  }], null);\n})();\nclass TranslateDirective {\n  translateService;\n  element;\n  _ref;\n  key;\n  lastParams;\n  currentParams;\n  onLangChangeSub;\n  onDefaultLangChangeSub;\n  onTranslationChangeSub;\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref;\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n        void event;\n        this.checkNodes(true);\n      });\n    }\n  }\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n  checkNodes(forceUpdate = false, translations) {\n    let nodes = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    nodes.forEach(n => {\n      const node = n;\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        let key;\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          const content = this.getContent(node);\n          const trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent;\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    });\n  }\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n      this.lastParams = this.currentParams;\n      const onTranslation = res => {\n        if (res !== key || !node.lastKey) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : node.originalContent || key;\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n      if (isDefined(translations)) {\n        const res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (isObservable(res)) {\n          res.subscribe({\n            next: onTranslation\n          });\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n  static ɵfac = function TranslateDirective_Factory(t) {\n    return new (t || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TranslateDirective,\n    selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n    inputs: {\n      translate: \"translate\",\n      translateParams: \"translateParams\"\n    },\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[translate],[ngx-translate]',\n      standalone: true\n    }]\n  }], () => [{\n    type: TranslateService\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\nclass TranslatePipe {\n  translate;\n  _ref;\n  value = '';\n  lastKey = null;\n  lastParams = [];\n  onTranslationChange;\n  onLangChange;\n  onDefaultLangChange;\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n  }\n  updateValue(key, interpolateParams, translations) {\n    const onTranslation = res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      const res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (isObservable(res)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    }\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n    let interpolateParams = undefined;\n    if (isDefined(args[0]) && args.length) {\n      if (isString(args[0]) && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        const validArgs = args[0].replace(/(')?([a-zA-Z0-9_]+)(')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(')(.*?)(')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          void e;\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (isDict(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n    // store the query, in case it changes\n    this.lastKey = query;\n    // store the params, in case they change\n    this.lastParams = args;\n    // set the value\n    this.updateValue(query, interpolateParams);\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n    return this.value;\n  }\n  /**\n   * Clean any existing subscription to change events\n   */\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n  ngOnDestroy() {\n    this._dispose();\n  }\n  static ɵfac = function TranslatePipe_Factory(t) {\n    return new (t || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n  };\n  static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"translate\",\n    type: TranslatePipe,\n    pure: false,\n    standalone: true\n  });\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TranslatePipe,\n    factory: TranslatePipe.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      standalone: true,\n      pure: false // required to update the value when the promise is resolved\n    }]\n  }], () => [{\n    type: TranslateService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], null);\n})();\nfunction _(key) {\n  return key;\n}\nconst provideTranslateService = (config = {}) => {\n  return makeEnvironmentProviders([config.loader || {\n    provide: TranslateLoader,\n    useClass: TranslateFakeLoader\n  }, config.compiler || {\n    provide: TranslateCompiler,\n    useClass: TranslateFakeCompiler\n  }, config.parser || {\n    provide: TranslateParser,\n    useClass: TranslateDefaultParser\n  }, config.missingTranslationHandler || {\n    provide: MissingTranslationHandler,\n    useClass: FakeMissingTranslationHandler\n  }, TranslateStore, {\n    provide: ISOALTE_TRANSLATE_SERVICE,\n    useValue: config.isolate\n  }, {\n    provide: USE_DEFAULT_LANG,\n    useValue: config.useDefaultLang\n  }, {\n    provide: USE_EXTEND,\n    useValue: config.extend\n  }, {\n    provide: DEFAULT_LANGUAGE,\n    useValue: config.defaultLanguage\n  }, TranslateService]);\n};\nclass TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: ISOALTE_TRANSLATE_SERVICE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: ISOALTE_TRANSLATE_SERVICE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  static ɵfac = function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TranslateModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      imports: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, ISOALTE_TRANSLATE_SERVICE, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, _, equals, getValue, isArray, isDefined, isDict, isFunction, isObject, isString, mergeDeep, provideTranslateService, setValue };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","makeEnvironmentProviders","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","FakeMissingTranslationHandler_Factory","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isDict","isObject","isString","isFunction","mergeDeep","target","source","output","assign","keys","forEach","getValue","split","shift","undefined","setValue","current","i","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","fn","replace","substring","b","r","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","TranslateStore","defaultLang","currentLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","ISOALTE_TRANSLATE_SERVICE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","makeObservable","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","loadingTranslations","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_defaultLang","_currentLang","_langs","_translations","_translationRequests","lastUseLanguage","constructor","defaultLanguage","setDefaultLang","retrieveTranslations","pipe","subscribe","changeDefaultLang","getDefaultLang","use","changeLang","emit","loadAndCompileTranslations","res","next","updateLangs","error","err","setTranslation","shouldMerge","interpolatableTranslations","getLangs","addLangs","indexOf","push","getParsedResultForKey","interpolateParams","runInterpolation","translateService","translation","result","getParsedResult","observables","k","sources","arr","obj","index","get","Error","getStreamOnTranslationChange","event","stream","instant","reduce","acc","currKey","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","getBrowserCultureLang","languages","language","browserLanguage","userLanguage","TranslateService_Factory","ɵɵinject","providedIn","args","decorators","TranslateDirective","element","_ref","lastParams","currentParams","onLangChangeSub","onDefaultLangChangeSub","onTranslationChangeSub","translate","checkNodes","translateParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","n","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","TranslateDirective_Factory","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","selectors","inputs","standalone","selector","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","TranslatePipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","_","provideTranslateService","config","loader","provide","useClass","useValue","TranslateModule","forRoot","ngModule","providers","forChild","TranslateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["/Users/gagd/Sites/A11Y/a11y-accessibility-first/node_modules/@ngx-translate/core/fesm2022/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n        void lang;\n        return of({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeLoader });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\n            type: Injectable\n        }] });\n\nclass MissingTranslationHandler {\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    handle(params) {\n        return params.key;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: FakeMissingTranslationHandler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\n            type: Injectable\n        }] });\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    const t1 = typeof o1, t2 = typeof o2;\n    let length, key, keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\nfunction isDict(value) {\n    return isObject(value) && !isArray(value);\n}\nfunction isObject(value) {\n    return typeof value === 'object';\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction mergeDeep(target, source) {\n    const output = Object.assign({}, target);\n    if (!isObject(target)) {\n        return mergeDeep({}, source);\n    }\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isDict(source[key])) {\n                if (key in target) {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n                else {\n                    Object.assign(output, { [key]: source[key] });\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n/**\n * Gets a value from an object by composed key\n * getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @param target\n * @param key\n */\nfunction getValue(target, key) {\n    const keys = key.split(\".\");\n    key = \"\";\n    do {\n        key += keys.shift();\n        if (isDefined(target) && isDefined(target[key]) && (isDict(target[key]) || isArray(target[key]) || !keys.length)) {\n            target = target[key];\n            key = \"\";\n        }\n        else if (!keys.length) {\n            target = undefined;\n        }\n        else {\n            key += \".\";\n        }\n    } while (keys.length);\n    return target;\n}\n/**\n * Gets a value from an object by composed key\n * parser.setValue({a:{b:{c: \"test\"}}}, 'a.b.c', \"test2\") ==> {a:{b:{c: \"test2\"}}}\n * @param target an object\n * @param key E.g. \"a.b.c\"\n * @param value to set\n */\nfunction setValue(target, key, value) {\n    const keys = key.split('.');\n    let current = target;\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        // If we're at the last key, set the value\n        if (i === keys.length - 1) {\n            current[key] = value;\n        }\n        else {\n            // If the key doesn't exist or isn't an object, create an empty object\n            if (!current[key] || !isDict(current[key])) {\n                current[key] = {};\n            }\n            current = current[key];\n        }\n    }\n}\n\nclass TranslateParser {\n}\nclass TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n        if (isString(expr)) {\n            return this.interpolateString(expr, params);\n        }\n        else if (isFunction(expr)) {\n            return this.interpolateFunction(expr, params);\n        }\n        return undefined;\n    }\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (substring, b) => {\n            const r = getValue(params, b);\n            return isDefined(r)\n                ? r\n                : substring;\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateDefaultParser });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateCompiler {\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n        void lang;\n        return value;\n    }\n    compileTranslations(translations, lang) {\n        void lang;\n        return translations;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeCompiler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    defaultLang;\n    /**\n     * The lang currently used\n     */\n    currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n    translations = {};\n    /**\n     * an array of langs\n     */\n    langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onDefaultLangChange = new EventEmitter();\n}\n\nconst ISOALTE_TRANSLATE_SERVICE = new InjectionToken('ISOALTE_TRANSLATE_SERVICE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nconst makeObservable = (value) => {\n    return isObservable(value) ? value : of(value);\n};\nclass TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    isolate;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _onTranslationChange = new EventEmitter();\n    _onLangChange = new EventEmitter();\n    _onDefaultLangChange = new EventEmitter();\n    _defaultLang;\n    _currentLang;\n    _langs = [];\n    _translations = {};\n    _translationRequests = {};\n    lastUseLanguage = null;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        const pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe(() => {\n                this.changeDefaultLang(lang);\n            });\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n        // remember the language that was called\n        // we need this with multiple fast calls to use()\n        // where translation loads might complete in random order\n        this.lastUseLanguage = lang;\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n            this.currentLang = lang;\n        }\n        const pending = this.retrieveTranslations(lang);\n        if (isObservable(pending)) {\n            pending.pipe(take(1))\n                .subscribe(() => {\n                this.changeLang(lang);\n            });\n            return pending;\n        }\n        else {\n            // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n        // received a new language file\n        // but this was not the one requested last\n        if (lang !== this.lastUseLanguage) {\n            return;\n        }\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.loadAndCompileTranslations(lang);\n            return this._translationRequests[lang];\n        }\n        return undefined;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     *\n     * @deprecated This function is meant for internal use. There should\n     * be no reason to use outside this service. You can plug into this\n     * functionality by using a customer TranslateLoader or TranslateCompiler.\n     * To load a new language use setDefaultLang() and/or use()\n     */\n    getTranslation(lang) {\n        return this.loadAndCompileTranslations(lang);\n    }\n    loadAndCompileTranslations(lang) {\n        this.pending = true;\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\n                this.updateLangs();\n                this.pending = false;\n            },\n            error: (err) => {\n                void err;\n                this.pending = false;\n            }\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        const interpolatableTranslations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], interpolatableTranslations);\n        }\n        else {\n            this.translations[lang] = interpolatableTranslations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available languages\n     */\n    addLangs(langs) {\n        langs.forEach((lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n    /**\n     * Update the list of available languages\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    getParsedResultForKey(translations, key, interpolateParams) {\n        let res;\n        if (translations) {\n            res = this.runInterpolation(getValue(translations, key), interpolateParams);\n        }\n        if (res === undefined && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.runInterpolation(getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (res === undefined) {\n            const params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return res !== undefined ? res : key;\n    }\n    runInterpolation(translations, interpolateParams) {\n        if (isArray(translations)) {\n            return translations.map((translation) => this.runInterpolation(translation, interpolateParams));\n        }\n        else if (isDict(translations)) {\n            const result = {};\n            for (const key in translations) {\n                result[key] = this.runInterpolation(translations[key], interpolateParams);\n            }\n            return result;\n        }\n        else {\n            return this.parser.interpolate(translations, interpolateParams);\n        }\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        // handle a bunch of keys\n        if (key instanceof Array) {\n            const result = {};\n            let observables = false;\n            for (const k of key) {\n                result[k] = this.getParsedResultForKey(translations, k, interpolateParams);\n                observables = observables || isObservable(result[k]);\n            }\n            if (!observables) {\n                return result;\n            }\n            const sources = key.map(k => makeObservable(result[k]));\n            return forkJoin(sources).pipe(map((arr) => {\n                const obj = {};\n                arr.forEach((value, index) => {\n                    obj[key[index]] = value;\n                });\n                return obj;\n            }));\n        }\n        return this.getParsedResultForKey(translations, key, interpolateParams);\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" is required and cannot be empty`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((res) => {\n                return makeObservable(this.getParsedResult(res, key, interpolateParams));\n            }));\n        }\n        return makeObservable(this.getParsedResult(this.translations[this.currentLang], key, interpolateParams));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" is required and cannot be empty`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return makeObservable(res);\n        })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return makeObservable(res);\n        })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages\n     * will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || key.length === 0) {\n            throw new Error('Parameter \"key\" is required and cannot be empty');\n        }\n        const result = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(result)) {\n            if (Array.isArray(key)) {\n                return key.reduce((acc, currKey) => {\n                    acc[currKey] = currKey;\n                    return acc;\n                }, {});\n            }\n            return key;\n        }\n        return result;\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, translation, lang = this.currentLang) {\n        setValue(this.translations[lang], key, isString(translation)\n            ? this.compiler.compile(translation, lang)\n            : this.compiler.compileTranslations(translation, lang));\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.loadAndCompileTranslations(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n        delete this._translationRequests[lang];\n        delete this.translations[lang];\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || !window.navigator) {\n            return undefined;\n        }\n        const browserLang = this.getBrowserCultureLang();\n        return browserLang ? browserLang.split(/[-_]/)[0] : undefined;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        return window.navigator.languages\n            ? window.navigator.languages[0]\n            : (window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: ISOALTE_TRANSLATE_SERVICE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_DEFAULT_LANG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ISOALTE_TRANSLATE_SERVICE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_EXTEND]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DEFAULT_LANGUAGE]\n                }] }] });\n\nclass TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\n                void event;\n                this.checkNodes(true);\n            });\n        }\n    }\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        nodes.forEach((n) => {\n            const node = n;\n            if (node.nodeType === 3) { // node type 3 is a text node\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    const content = this.getContent(node);\n                    const trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        });\n    }\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            const onTranslation = (res) => {\n                if (res !== key || !node.lastKey) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                const res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe({ next: onTranslation });\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    getContent(node) {\n        return (isDefined(node.textContent) ? node.textContent : node.data);\n    }\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.10\", type: TranslateDirective, isStandalone: true, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[translate],[ngx-translate]',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], propDecorators: { translate: [{\n                type: Input\n            }], translateParams: [{\n                type: Input\n            }] } });\n\nclass TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n        const onTranslation = (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if (translations) {\n            const res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        let interpolateParams = undefined;\n        if (isDefined(args[0]) && args.length) {\n            if (isString(args[0]) && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                const validArgs = args[0]\n                    .replace(/(')?([a-zA-Z0-9_]+)(')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(')(.*?)(')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    void e;\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (isDict(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this._dispose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslatePipe, isStandalone: true, name: \"translate\", pure: false });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslatePipe });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslatePipe, decorators: [{\n            type: Injectable\n        }, {\n            type: Pipe,\n            args: [{\n                    name: 'translate',\n                    standalone: true,\n                    pure: false // required to update the value when the promise is resolved\n                }]\n        }], ctorParameters: () => [{ type: TranslateService }, { type: i0.ChangeDetectorRef }] });\n\nfunction _(key) {\n    return key;\n}\n\nconst provideTranslateService = (config = {}) => {\n    return makeEnvironmentProviders([\n        config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n        config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n        config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n        config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n        TranslateStore,\n        { provide: ISOALTE_TRANSLATE_SERVICE, useValue: config.isolate },\n        { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n        { provide: USE_EXTEND, useValue: config.extend },\n        { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n        TranslateService\n    ]);\n};\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: ISOALTE_TRANSLATE_SERVICE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: ISOALTE_TRANSLATE_SERVICE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateModule, imports: [TranslatePipe,\n            TranslateDirective], exports: [TranslatePipe,\n            TranslateDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.10\", ngImport: i0, type: TranslateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ],\n                    exports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, ISOALTE_TRANSLATE_SERVICE, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, _, equals, getValue, isArray, isDefined, isDict, isFunction, isObject, isString, mergeDeep, provideTranslateService, setValue };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}