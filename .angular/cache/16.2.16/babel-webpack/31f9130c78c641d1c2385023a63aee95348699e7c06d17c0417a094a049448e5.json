{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FontSizeService {\n  constructor(rendererFactory) {\n    this.rendererFactory = rendererFactory;\n    this.baseFontSize = 100; // 100% of base font size\n    this.fontSize = this.baseFontSize;\n    this.minFontSize = 75; // 75% of base font size\n    this.maxFontSize = 250; // 150% of base font size\n    this.renderer = this.rendererFactory.createRenderer(null, null);\n  }\n  setFontSize(size) {\n    // Ensure the font size is within the min/max range\n    this.fontSize = Math.max(this.minFontSize, Math.min(this.maxFontSize, size));\n    this.applyFontSize();\n  }\n  resetFontSize() {\n    this.fontSize = this.baseFontSize;\n    this.applyFontSize();\n  }\n  getFontSize() {\n    return this.fontSize;\n  }\n  getMinFontSize() {\n    return this.minFontSize;\n  }\n  getMaxFontSize() {\n    return this.maxFontSize;\n  }\n  applyFontSize() {\n    this.renderer.setStyle(document.documentElement, 'font-size', `${this.fontSize}%`);\n  }\n  static {\n    this.ɵfac = function FontSizeService_Factory(t) {\n      return new (t || FontSizeService)(i0.ɵɵinject(i0.RendererFactory2));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FontSizeService,\n      factory: FontSizeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["FontSizeService","constructor","rendererFactory","baseFontSize","fontSize","minFontSize","maxFontSize","renderer","createRenderer","setFontSize","size","Math","max","min","applyFontSize","resetFontSize","getFontSize","getMinFontSize","getMaxFontSize","setStyle","document","documentElement","i0","ɵɵinject","RendererFactory2","factory","ɵfac","providedIn"],"sources":["/Users/gagd/Sites/A11Y/a11y-accessibility-first/src/app/services/font-size/font-size.service.ts"],"sourcesContent":["import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FontSizeService {\n  private baseFontSize = 100; // 100% of base font size\n  private fontSize = this.baseFontSize;\n  private minFontSize = 75; // 75% of base font size\n  private maxFontSize = 250; // 150% of base font size\n  private renderer: Renderer2;\n\n  constructor(private rendererFactory: RendererFactory2) {\n    this.renderer = this.rendererFactory.createRenderer(null, null);\n  }\n\n  setFontSize(size: number) {\n    // Ensure the font size is within the min/max range\n    this.fontSize = Math.max(\n      this.minFontSize,\n      Math.min(this.maxFontSize, size)\n    );\n    this.applyFontSize();\n  }\n\n  resetFontSize() {\n    this.fontSize = this.baseFontSize;\n    this.applyFontSize();\n  }\n\n  getFontSize() {\n    return this.fontSize;\n  }\n\n  getMinFontSize() {\n    return this.minFontSize;\n  }\n\n  getMaxFontSize() {\n    return this.maxFontSize;\n  }\n\n  private applyFontSize() {\n    this.renderer.setStyle(\n      document.documentElement,\n      'font-size',\n      `${this.fontSize}%`\n    );\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,eAAe;EAO1BC,YAAoBC,eAAiC;IAAjC,KAAAA,eAAe,GAAfA,eAAe;IAN3B,KAAAC,YAAY,GAAG,GAAG,CAAC,CAAC;IACpB,KAAAC,QAAQ,GAAG,IAAI,CAACD,YAAY;IAC5B,KAAAE,WAAW,GAAG,EAAE,CAAC,CAAC;IAClB,KAAAC,WAAW,GAAG,GAAG,CAAC,CAAC;IAIzB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACL,eAAe,CAACM,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC;EACjE;EAEAC,WAAWA,CAACC,IAAY;IACtB;IACA,IAAI,CAACN,QAAQ,GAAGO,IAAI,CAACC,GAAG,CACtB,IAAI,CAACP,WAAW,EAChBM,IAAI,CAACE,GAAG,CAAC,IAAI,CAACP,WAAW,EAAEI,IAAI,CAAC,CACjC;IACD,IAAI,CAACI,aAAa,EAAE;EACtB;EAEAC,aAAaA,CAAA;IACX,IAAI,CAACX,QAAQ,GAAG,IAAI,CAACD,YAAY;IACjC,IAAI,CAACW,aAAa,EAAE;EACtB;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACZ,QAAQ;EACtB;EAEAa,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,WAAW;EACzB;EAEAa,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,WAAW;EACzB;EAEQQ,aAAaA,CAAA;IACnB,IAAI,CAACP,QAAQ,CAACY,QAAQ,CACpBC,QAAQ,CAACC,eAAe,EACxB,WAAW,EACX,GAAG,IAAI,CAACjB,QAAQ,GAAG,CACpB;EACH;;;uBA3CWJ,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAD,EAAA,CAAAE,gBAAA;IAAA;EAAA;;;aAAfxB,eAAe;MAAAyB,OAAA,EAAfzB,eAAe,CAAA0B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}